name: Prod Server CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: application.yml 생성
        run: |
          echo "Create application.yml from secret"
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD_PROPERTIES }}" > src/main/resources/application.yml
          mkdir -p src/test/resources
          echo "${{ secrets.APPLICATION_TEST_PROPERTIES }}" > src/test/resources/application-test.yml

      - name: JAR 빌드
        run: ./gradlew clean build --no-daemon

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          if ! docker buildx inspect ci-builder &>/dev/null; then
            docker buildx create --use --name ci-builder
          else
            docker buildx use ci-builder
          fi
          docker buildx build \
            --platform linux/arm64,linux/amd64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/final-mission-prod:buildcache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/final-mission-prod:buildcache,mode=max \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/final-mission-prod:latest \
            --push .

  deploy:
    needs: build
    runs-on: [ self-hosted, prod ]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker 이미지 Pull
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/final-mission-prod:latest
          docker pull $IMAGE

      - name: 이미지 변경 여부 확인
        id: compare_digest
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/final-mission-prod:latest
          NEW=$(docker inspect --format='{{.Id}}' "$IMAGE")
          
          # 기존 컨테이너가 존재하는지 확인
          if docker inspect final-mission-prod &>/dev/null; then
          CURRENT=$(docker inspect --format='{{.Image}}' final-mission-prod)
          else
          CURRENT="not_found"
          fi
          
          echo "new_image_id=$NEW" >> $GITHUB_OUTPUT
          echo "current_image_id=$CURRENT" >> $GITHUB_OUTPUT
          
          if [ "$NEW" = "$CURRENT" ]; then
          echo "Image unchanged. Skipping deployment."
          echo "skip_deploy=true" >> $GITHUB_ENV
          else
          echo "skip_deploy=false" >> $GITHUB_ENV
          fi

      - name: 컨테이너 재실행
        run: |
          docker compose -f docker-compose-prod.yml down || true
          docker compose -f docker-compose-prod.yml up -d

      - name: Docker 리소스 정리
        if: env.skip_deploy == 'false'
        run: |
          echo "Docker 리소스 정리 시작"
          docker container prune -f --filter "until=24h"
          docker image prune -f --filter "until=24h"
          echo "리소스 정리 완료"
